gradient: LinearGradient(
          colors: [Colors.purple, Colors.red],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),



 decoration: BoxDecoration(
                  color: Colors.red,
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(30.0),
                    topRight: Radius.circular(30.0),
                  )),

AlertDialog(
        title: Text("Could not launch URL"),
        actions: [
          FlatButton(
            onPressed: () {},
            child: Text('Ok'),
          ),
        ],
      );


  decoration: BoxDecoration(
          borderRadius: BorderRadius.all(Radius.circular(24.0)),
          gradient: LinearGradient(
            colors: [Colors.purple, Colors.red],
            begin: Alignment.centerLeft,
            end: Alignment.centerRight,
          ),
        ),





/////////////////////////////////////
        
import 'package:event_calendar/event_calendar.dart';
import 'package:flutter/material.dart';

class CalendarScreen extends StatefulWidget {
  CalendarScreen({Key key}) : super(key: key);

  @override
  CalendarScreenState createState() => CalendarScreenState();
}






class MyApp extends MyApp {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return SplashScreen(
      seconds: 3,
      backgroundColor: Colors.white,
      image: Image.asset('assets/loading.gif'),
      loaderColor: Colors.white,
      photoSize: 150.0,
      navigateAfterSeconds: MainScreen(),
    );
  }
}

class CalendarScreenState extends State<CalendarScreen> {
  Calendar calendar = new Calendar(title: "My Calendar", id: "calendarID");

  void initState() {
    super.initState();
    calendar.addEvent(Event(DateTime(2020, 6, 1, 12, 0, 0),
        id: "1",
        title: "Take out the garbage",
        recurrenceRule: RecurrenceRule(Frequency.weekly,
            byDay: [DayOfTheWeek.Monday, DayOfTheWeek.Friday], count: -1)));
    calendar.addEvent(Event(DateTime(2020, 6, 18, 12, 0, 0),
        id: "2",
        title: "Pay garbage bill",
        recurrenceRule: RecurrenceRule(Frequency.monthly, count: 4)));
    calendar.addEvent(Event(DateTime(2020, 7, 17, 12, 0, 0),
        id: "3", title: "Cancel garbage service"));
  }

  List<Widget> displayEvents(DateTime start, DateTime end) {
    List<Widget> children = List();
    List<Event> events = calendar.getEvents(start, end);
    events.sort((a, b) {
      return a.currentDate.difference(b.currentDate).inSeconds;
    });
    events.forEach((e) {
      print(e.title);
      children.add(Padding(
        padding: const EdgeInsets.all(8.0),
        child: ClipRRect(
            child: GestureDetector(
          onTap: () {},
          child: Row(
            children: <Widget>[
              Expanded(
                  child: Container(
                      color: Colors.blue,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: <Widget>[
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(
                              e.title,
                              style: TextStyle(
                                  fontSize: 18,
                                  color: Colors.white,
                                  fontWeight: FontWeight.w500),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(
                              "${e.currentDate.toIso8601String()}",
                              style: TextStyle(
                                  fontSize: 16,
                                  color: Colors.white,
                                  fontWeight: FontWeight.w400),
                            ),
                          ),
                        ],
                      ))),
            ],
          ),
        )),
      ));
    });

    if (children.length == 0) {
      children.add(Center(
          child: Container(
              child: Text(
                "All clear! \nNo events planned for this day",
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 18),
              ),
              height: 100)));
    }

    return children;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Container(
              height: 50,
            ),
            Column(
                children: displayEvents(DateTime(2020, 6, 18, 12, 0, 0),
                    DateTime(2020, 7, 17, 12, 0, 0))),
          ],
        ),
      ),
    );
  }
}




////////CalendarScreen
import 'package:flutter/material.dart';
import 'package:syncfusion_flutter_calendar/calendar.dart';

class CalendarScreen extends StatefulWidget {
  CalendarScreen({Key key}) : super(key: key);

  @override
  _CalendarScreenState createState() => _CalendarScreenState();
}

class _CalendarScreenState extends State<CalendarScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: EdgeInsets.symmetric(vertical: 20),
        child: SfCalendar(
          view: CalendarView.month,
          firstDayOfWeek: 1,
          // dataSource: ClassDataSource(getAppointments()
          // )
        ),
      ),
    );
  }
}

List<Appointment> getAppointments() {
  List<Appointment> classes = <Appointment>[];
  final DateTime today = DateTime.now();
  final DateTime startTime =
      DateTime(today.year, today.month, today.day, 10, 0, 0);
  final DateTime endTime = startTime.add(const Duration(hours: 2));

  classes.add(
    Appointment(
        startTime: startTime,
        endTime: endTime,
        subject: 'Class Name',
        color: Colors.blue,
        recurrenceRule: 'FREQ=DAILY;COUNT=10'),
  );
  return classes;
}

class ClassDataSource extends CalendarDataSource {
  ClassDataSource(List<Appointment> source) {
    appointments = source;
  }
}
